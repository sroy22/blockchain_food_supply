{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\MscAC\\\\Blockchain\\\\2125\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\MscAC\\\\Blockchain\\\\2125\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\MscAC\\\\Blockchain\\\\2125\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\MscAC\\\\Blockchain\\\\2125\\\\Code\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport Investment from './abis/Investment.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nfunction FarmerInvestor() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      investment = _useState4[0],\n      setInvestment = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      farmerCount = _useState6[0],\n      setFarmerCount = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      farmers = _useState8[0],\n      setFarmers = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      initial = _useState10[0],\n      setInitial = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      investorCount = _useState12[0],\n      SetInvestorCount = _useState12[1];\n\n  function loadWeb3() {\n    return _loadWeb.apply(this, arguments);\n  }\n\n  function _loadWeb() {\n    _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _loadWeb.apply(this, arguments);\n  }\n\n  function loadBlockchainData() {\n    return _loadBlockchainData.apply(this, arguments);\n  }\n\n  function _loadBlockchainData() {\n    _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, place, count, dealcount, p, deals, i, farmer, deal;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; // Load account\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n              setInitial(accounts[0]);\n              setAccount(accounts[0]); //this.setState({ account: accounts[0] })\n\n              _context3.next = 8;\n              return web3.eth.net.getId();\n\n            case 8:\n              networkId = _context3.sent;\n              networkData = Investment.networks[networkId];\n\n              if (!networkData) {\n                _context3.next = 44;\n                break;\n              }\n\n              place = new web3.eth.Contract(Investment.abi, networkData.address);\n              setInvestment(place);\n              _context3.next = 15;\n              return place.methods.farmerCount().call();\n\n            case 15:\n              count = _context3.sent;\n              setFarmerCount(count);\n              _context3.next = 19;\n              return place.methods.dealCount().call();\n\n            case 19:\n              dealcount = _context3.sent;\n              SetInvestorCount(dealcount);\n              p = [];\n              deals = [];\n              i = 1;\n\n            case 24:\n              if (!(i <= count)) {\n                _context3.next = 32;\n                break;\n              }\n\n              _context3.next = 27;\n              return place.methods.farmers(i).call();\n\n            case 27:\n              farmer = _context3.sent;\n              p.push(farmer);\n\n            case 29:\n              i++;\n              _context3.next = 24;\n              break;\n\n            case 32:\n              i = 1;\n\n            case 33:\n              if (!(i <= dealcount)) {\n                _context3.next = 41;\n                break;\n              }\n\n              _context3.next = 36;\n              return place.methods.deals(i).call();\n\n            case 36:\n              deal = _context3.sent;\n              deals.push(deal);\n\n            case 38:\n              i++;\n              _context3.next = 33;\n              break;\n\n            case 41:\n              setFarmers(p);\n              _context3.next = 45;\n              break;\n\n            case 44:\n              window.alert('Investment contract not deployed to detected network.');\n\n            case 45:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _loadBlockchainData.apply(this, arguments);\n  }\n\n  function createInsurance(_x, _x2) {\n    return _createInsurance.apply(this, arguments);\n  }\n\n  function _createInsurance() {\n    _createInsurance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name, price) {\n      var delayInMilliseconds;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              investment.methods.createProduct(name, price, initial).send({\n                from: account,\n                value: price\n              }).on('transactionHash', function (hash) {});\n              delayInMilliseconds = 8000; //1 second\n\n              setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        //your code to be executed after 1 second\n                        loadBlockchainData();\n\n                      case 1:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              })), delayInMilliseconds);\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _createInsurance.apply(this, arguments);\n  }\n\n  function reimburse(id, price) {\n    investment.methods.purchaseProduct(id).send({\n      from: account,\n      value: price,\n      to: initial\n    });\n    var delayInMilliseconds = 8000; //1 second\n\n    setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loadBlockchainData();\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })), delayInMilliseconds);\n  }\n\n  window.ethereum.on('accountsChanged', function (accounts) {\n    // Time to reload your interface with accounts[0]!\n    setAccount(accounts[0]);\n  });\n\n  function createAccount(_x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10) {\n    return _createAccount.apply(this, arguments);\n  }\n\n  function _createAccount() {\n    _createAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(name, location, crop, quantity, price, expiryDate, holding, costToProduce) {\n      var delayInMilliseconds;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              investment.methods.createFarmer(name, location, crop, quantity, price, expiryDate, holding, costToProduce).send({\n                from: account\n              });\n              delayInMilliseconds = 8000; //1 second\n\n              setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        //your code to be executed after 1 second\n                        loadBlockchainData();\n\n                      case 1:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6);\n              })), delayInMilliseconds);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _createAccount.apply(this, arguments);\n  }\n\n  function payBackToInvestor(_x11) {\n    return _payBackToInvestor.apply(this, arguments);\n  }\n\n  function _payBackToInvestor() {\n    _payBackToInvestor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n      var deals, i, deal;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              deals = [];\n              i = 1;\n\n            case 2:\n              if (!(i <= investorCount)) {\n                _context8.next = 12;\n                break;\n              }\n\n              _context8.next = 5;\n              return investment.methods.deals(i).call();\n\n            case 5:\n              deal = _context8.sent;\n              deal.amount = deal.amount;\n              investment.methods.repay(deal.farmerID).send({\n                from: account,\n                value: deal.amount,\n                to: deal.investorAddress\n              });\n              deals.push(deal);\n\n            case 9:\n              i++;\n              _context8.next = 2;\n              break;\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _payBackToInvestor.apply(this, arguments);\n  }\n\n  function makeInvestment(_x12, _x13, _x14) {\n    return _makeInvestment.apply(this, arguments);\n  } // Similar to componentDidMount and componentDidUpdate:\n\n\n  function _makeInvestment() {\n    _makeInvestment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(id, costToProduce, holdingPercent) {\n      var price, farmer, delayInMilliseconds;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              price = holdingPercent * 0.01 * costToProduce + \"000000000000000000\";\n              _context10.next = 3;\n              return investment.methods.farmers(id).call();\n\n            case 3:\n              farmer = _context10.sent;\n              investment.methods.purchaseProduct(id).send({\n                from: account,\n                value: price,\n                to: initial\n              });\n              investment.methods.createAgreement(id, price, holdingPercent).send({\n                from: account\n              });\n              delayInMilliseconds = 8000; //1 second\n\n              setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n                return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        //your code to be executed after 1 second\n                        loadBlockchainData();\n\n                      case 1:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee9);\n              })), delayInMilliseconds);\n\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _makeInvestment.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    className: \"col-lg-12 d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    products: farmers,\n    createProduct: createAccount,\n    purchaseProduct: makeInvestment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    onClick: payBackToInvestor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, \"Pay back to investors\")))));\n}\n\nexport default FarmerInvestor;","map":{"version":3,"sources":["C:/MscAC/Blockchain/2125/Code/src/App.js"],"names":["React","useState","useEffect","Web3","Investment","Navbar","Main","FarmerInvestor","account","setAccount","investment","setInvestment","farmerCount","setFarmerCount","farmers","setFarmers","initial","setInitial","investorCount","SetInvestorCount","loadWeb3","window","ethereum","web3","enable","currentProvider","alert","loadBlockchainData","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","place","Contract","abi","address","methods","call","count","dealCount","dealcount","p","deals","i","farmer","push","deal","createInsurance","name","price","createProduct","send","from","value","on","hash","delayInMilliseconds","setTimeout","reimburse","id","purchaseProduct","to","createAccount","location","crop","quantity","expiryDate","holding","costToProduce","createFarmer","payBackToInvestor","event","amount","repay","farmerID","investorAddress","makeInvestment","holdingPercent","createAgreement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3'\nimport Investment from './abis/Investment.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\n\n\nfunction FarmerInvestor() {\n  const [account, setAccount] = useState(0);\n  const [investment, setInvestment] = useState(null);\n\n  const [farmerCount, setFarmerCount] = useState(0);\n  const [farmers, setFarmers] = useState([]);\n\n  const [initial, setInitial] = useState(0);\n  const [investorCount, SetInvestorCount] = useState(0);\n\n  async function loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n  async function loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    setInitial(accounts[0]);\n    setAccount(accounts[0]);\n    //this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    const networkData = Investment.networks[networkId]\n    if(networkData) {\n      const place = new web3.eth.Contract(Investment.abi, networkData.address)\n      setInvestment(place);\n      const count = await place.methods.farmerCount().call()\n      setFarmerCount(count);\n      const dealcount = await place.methods.dealCount().call()\n      SetInvestorCount(dealcount);\n      let p = []\n      let deals = [];\n      for (var i = 1; i <= count; i++) {\n        const farmer = await place.methods.farmers(i).call()\n        p.push(farmer);\n      }\n      for (var i = 1; i <= dealcount; i++) {\n        const deal = await place.methods.deals(i).call()\n        deals.push(deal);\n      }\n      setFarmers(p);\n    } else {\n      window.alert('Investment contract not deployed to detected network.')\n    }\n  }\n\n\n  async function createInsurance(name, price) {\n     investment.methods.createProduct(name, price, initial).send({ from: account, value: price })\n     .on('transactionHash', (hash) => {\n     })\n \n     var delayInMilliseconds = 8000; //1 second\n    setTimeout( async function() {\n    //your code to be executed after 1 second\n    loadBlockchainData();\n    }, delayInMilliseconds);\n   }\n \n   function   reimburse(id, price) {\n      investment.methods.purchaseProduct(id).send({ from: account, value: price, to: initial }) \n      var delayInMilliseconds = 8000; //1 second\n    setTimeout( async function() {\n          loadBlockchainData();\n      }, delayInMilliseconds);\n    }\n\n   window.ethereum.on('accountsChanged', function (accounts) {\n     // Time to reload your interface with accounts[0]!\n     setAccount(accounts[0])\n   })\n  \n async function createAccount(name, location, crop, quantity, price, expiryDate, holding, costToProduce) {\n    investment.methods.createFarmer(name, location, crop, quantity, price, expiryDate, holding, costToProduce).send({ from: account })\n    var delayInMilliseconds = 8000; //1 second\n    setTimeout( async function() {\n      //your code to be executed after 1 second\n      loadBlockchainData();\n      }, delayInMilliseconds);\n    }\n\n  async function payBackToInvestor(event){\n    let deals = [];\n    for (var i = 1; i <= investorCount; i++) {\n      const deal = await investment.methods.deals(i).call()\n      deal.amount = deal.amount;\n      investment.methods.repay(deal.farmerID).send({ from: account, value: deal.amount, to: deal.investorAddress})\n      deals.push(deal);\n    }\n  }\n\n async function   makeInvestment(id, costToProduce, holdingPercent) {\n    const price = holdingPercent*0.01*costToProduce +  \"000000000000000000\";\n    const farmer = await investment.methods.farmers(id).call();\n    investment.methods.purchaseProduct(id).send({ from: account, value: price, to: initial })\n    investment.methods.createAgreement(id,price, holdingPercent).send({ from: account })\n    var delayInMilliseconds = 8000; //1 second\n  setTimeout( async function() {\n        //your code to be executed after 1 second\n    loadBlockchainData();\n    }, delayInMilliseconds);\n    }\n\n  // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n      loadWeb3();\n      loadBlockchainData();\n    }, []);\n  \n  return (\n    <div>\n    <Navbar account={account} />\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 d-flex\">\n          \n            <div> \n            <Main\n              products={farmers}\n              createProduct={createAccount}\n              purchaseProduct={makeInvestment} />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\" onClick= {payBackToInvestor}>Pay back to investors</button>\n        </main>\n      </div>\n    </div>\n  </div>\n  );\n}\nexport default FarmerInvestor;\n"]},"metadata":{},"sourceType":"module"}